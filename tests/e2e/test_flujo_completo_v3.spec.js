/**
 * ===== TEST COMPLETO DEL FLUJO DE CHECK-IN Y PAGO =====
 * Gestor HR v3.0 - Sistema Hotelero Profesional
 *
 * Este test verifica el flujo completo:
 * 1. Login de usuario
 * 2. Visualizaci√≥n de habitaciones
 * 3. Selecci√≥n de habitaci√≥n disponible
 * 4. Selecci√≥n de tarifa
 * 5. Registro de cliente
 * 6. Proceso de pago
 * 7. Verificaci√≥n de check-in exitoso
 */

import { test, expect } from '@playwright/test';

test.describe('Gestor HR v3.0 - Flujo Completo Check-in y Pago', () => {

    test.beforeEach(async ({ page }) => {
        // Navegar a la aplicaci√≥n
        await page.goto('http://localhost:8000');

        // Realizar login real con las credenciales del usuario admin creado
        console.log('üîê Realizando login con usuario admin...');

        // Esperar a que aparezca el modal de login (debe estar visible por defecto)
        await page.waitForSelector('#modal-login', { timeout: 10000 });

        // Verificar que el modal sea visible
        await page.waitForFunction(() => {
            const modal = document.getElementById('modal-login');
            const computed = window.getComputedStyle(modal);
            return computed.display !== 'none' && computed.visibility !== 'hidden';
        }, { timeout: 10000 });

        // Llenar el formulario de login con los IDs correctos
        await page.fill('#login-email', 'admin@hotel.com');
        await page.fill('#login-password', 'admin123');

        // Click en el bot√≥n de login
        await page.click('#btn-login');

        // Esperar a que el login sea exitoso y el modal se oculte
        await page.waitForFunction(() => {
            const modal = document.getElementById('modal-login');
            const computed = window.getComputedStyle(modal);
            return computed.display === 'none' || computed.visibility === 'hidden';
        }, { timeout: 15000 });

        // Esperar a que se cargue la aplicaci√≥n completamente
        await page.waitForSelector('.header-principal', { timeout: 10000 });
        await page.waitForTimeout(3000);

        console.log('‚úÖ Login exitoso y aplicaci√≥n cargada correctamente');
    });

    test('Flujo completo: Login ‚Üí Selecci√≥n de habitaci√≥n ‚Üí Check-in ‚Üí Pago', async ({ page }) => {
        console.log('üöÄ Iniciando test del flujo completo...');

        // ===== PASO 1: VERIFICAR LOGIN =====
        console.log('üìù PASO 1: Verificando proceso de login...');

        // Buscar y hacer clic en el modal de login (si aparece)
        try {
            const loginModal = page.locator('#modal-login');
            if (await loginModal.isVisible({ timeout: 5000 })) {
                console.log('üîê Modal de login detectado, procediendo con autenticaci√≥n...');

                await page.fill('#login-email', 'admin@hotel.com');
                await page.fill('#login-password', 'admin123');
                await page.click('#btn-login');

                // Esperar a que el modal desaparezca
                await loginModal.waitFor({ state: 'detached', timeout: 10000 });
                console.log('‚úÖ Login completado exitosamente');
            } else {
                console.log('‚ÑπÔ∏è Usuario ya autenticado o modal no visible');
            }
        } catch (error) {
            console.log('‚ö†Ô∏è No se encontr√≥ modal de login, continuando...');
        }

        // ===== PASO 2: VERIFICAR NAVEGACI√ìN A RECEPCI√ìN =====
        console.log('üìù PASO 2: Verificando interfaz de recepci√≥n...');

        // Verificar que estamos en la secci√≥n de recepci√≥n
        await expect(page.locator('#vista-recepcion')).toBeVisible({ timeout: 10000 });
        console.log('‚úÖ Vista de recepci√≥n cargada');

        // Verificar que el bot√≥n de recepci√≥n est√° activo
        const recepcionBtn = page.locator('.nav-btn[data-vista="vista-recepcion"]');
        await expect(recepcionBtn).toHaveClass(/active/);
        console.log('‚úÖ Navegaci√≥n de recepci√≥n activa');

        // ===== PASO 3: VERIFICAR CARGA DE HABITACIONES =====
        console.log('üìù PASO 3: Verificando carga de habitaciones...');

        // Esperar a que se carguen las habitaciones
        await page.waitForSelector('#mapa-habitaciones-grid .habitacion-card', { timeout: 15000 });

        // Contar habitaciones cargadas
        const habitaciones = page.locator('.habitacion-card');
        const countHabitaciones = await habitaciones.count();
        console.log(`üè† Habitaciones cargadas: ${countHabitaciones}`);

        expect(countHabitaciones).toBeGreaterThan(0);

        // Verificar que hay al menos una habitaci√≥n disponible
        const habitacionesDisponibles = page.locator('.habitacion-card.estado-disponible');
        const countDisponibles = await habitacionesDisponibles.count();
        console.log(`‚úÖ Habitaciones disponibles: ${countDisponibles}`);

        expect(countDisponibles).toBeGreaterThan(0);

        // ===== PASO 4: SELECCIONAR HABITACI√ìN DISPONIBLE =====
        console.log('üìù PASO 4: Seleccionando habitaci√≥n disponible...');

        // Hacer clic en la primera habitaci√≥n disponible
        const primeraHabitacionDisponible = habitacionesDisponibles.first();

        // Obtener informaci√≥n de la habitaci√≥n antes de hacer clic
        const numeroHabitacion = await primeraHabitacionDisponible.locator('.habitacion-numero').textContent();
        console.log(`üè† Seleccionando habitaci√≥n: ${numeroHabitacion}`);

        await primeraHabitacionDisponible.click();

        // ===== PASO 5: VERIFICAR APERTURA DEL MODAL DE OPERACI√ìN =====
        console.log('üìù PASO 5: Verificando modal de operaci√≥n...');

        // Esperar a que aparezca el modal de operaci√≥n
        const modalOperacion = page.locator('#modal-operacion-habitacion');
        await expect(modalOperacion).toBeVisible({ timeout: 10000 });
        console.log('‚úÖ Modal de operaci√≥n abierto');

        // Verificar que el t√≠tulo contiene el n√∫mero de habitaci√≥n
        const tituloModal = page.locator('#op-numero-habitacion');
        await expect(tituloModal).toContainText(numeroHabitacion || '');

        // ===== PASO 6: SELECCIONAR TARIFA =====
        console.log('üìù PASO 6: Seleccionando tarifa...');

        // Esperar a que aparezcan las tarifas
        await page.waitForSelector('.tarifa-card', { timeout: 10000 });

        // Seleccionar la primera tarifa (Est√°ndar)
        const tarifaEstandar = page.locator('.tarifa-card[data-tarifa-id="estandar"]');
        await expect(tarifaEstandar).toBeVisible();

        const btnSeleccionarTarifa = tarifaEstandar.locator('.btn-seleccionar-tarifa');
        await btnSeleccionarTarifa.click();

        console.log('‚úÖ Tarifa est√°ndar seleccionada');

        // Verificar que la tarifa se marc√≥ como seleccionada
        await expect(tarifaEstandar).toHaveClass(/selected/);

        // Verificar que el bot√≥n de continuar se habilit√≥
        const btnContinuar = page.locator('#btn-op-checkin');
        await expect(btnContinuar).toBeVisible();
        await expect(btnContinuar).not.toBeDisabled();

        // ===== PASO 7: COMPLETAR DATOS DEL CLIENTE =====
        console.log('üìù PASO 7: Completando datos del cliente...');

        // Llenar formulario de cliente
        await page.fill('#cliente-nombre', 'Juan P√©rez Test');
        await page.fill('#cliente-email', 'juan.perez@test.com');
        await page.fill('#cliente-telefono', '+34 600 123 456');

        console.log('‚úÖ Datos del cliente completados');

        // ===== PASO 8: CONTINUAR AL PAGO =====
        console.log('üìù PASO 8: Continuando al proceso de pago...');

        await btnContinuar.click();

        // Esperar un momento para que se procese
        await page.waitForTimeout(2000);

        // ===== PASO 9: VERIFICAR MODAL DE PAGO =====
        console.log('üìù PASO 9: Verificando modal de pago...');

        // Esperar a que aparezca el modal de pago
        const modalPago = page.locator('#modal-pago');
        await expect(modalPago).toBeVisible({ timeout: 10000 });
        console.log('‚úÖ Modal de pago abierto');

        // Verificar que aparece el resumen del pago
        const pagoLineas = page.locator('#pago-lineas');
        await expect(pagoLineas).toBeVisible();

        const totalAmount = page.locator('#pago-total-amount');
        await expect(totalAmount).toBeVisible();

        const totalText = await totalAmount.textContent();
        console.log(`üí∞ Total a pagar: ${totalText}`);

        // ===== PASO 10: SELECCIONAR M√âTODO DE PAGO =====
        console.log('üìù PASO 10: Seleccionando m√©todo de pago...');

        // Verificar que efectivo est√° seleccionado por defecto
        const radioEfectivo = page.locator('input[name="metodo"][value="efectivo"]');
        await expect(radioEfectivo).toBeChecked();

        // Verificar que aparece el campo de dinero recibido
        const dineroRecibido = page.locator('#dinero-recibido');
        await expect(dineroRecibido).toBeVisible();

        console.log('‚úÖ M√©todo de pago en efectivo seleccionado');

        // ===== PASO 11: CONFIRMAR PAGO =====
        console.log('üìù PASO 11: Confirmando pago...');

        const btnConfirmarPago = page.locator('#btn-confirmar-pago');
        await expect(btnConfirmarPago).toBeVisible();
        await expect(btnConfirmarPago).not.toBeDisabled();

        await btnConfirmarPago.click();

        // ===== PASO 12: VERIFICAR √âXITO DEL PROCESO =====
        console.log('üìù PASO 12: Verificando √©xito del proceso...');

        // Esperar un momento a que se procese el pago
        await page.waitForTimeout(3000);

        // Verificar si aparece un mensaje (exitoso o de error)
        const mensajeExito = page.locator('.mensaje-exito');
        const mensajeError = page.locator('.mensaje-error');

        try {
            // Intentar encontrar mensaje de √©xito
            await page.waitForSelector('.mensaje-exito', { timeout: 5000 });
            await expect(mensajeExito).toBeVisible();

            const textoMensaje = await mensajeExito.textContent();
            console.log(`‚úÖ Mensaje de √©xito: ${textoMensaje}`);

        } catch (error) {
            // Si no hay mensaje de √©xito, verificar si hay error
            const hasError = await mensajeError.isVisible();
            if (hasError) {
                const textoError = await mensajeError.textContent();
                console.log(`‚ùå Mensaje de error: ${textoError}`);

                // Hacer screenshot para debug
                await page.screenshot({ path: 'payment-error-debug.png' });

                // Fallar el test con informaci√≥n del error
                throw new Error(`Pago fall√≥ con error: ${textoError}`);
            } else {
                // No hay ning√∫n mensaje, hacer screenshot para debug
                await page.screenshot({ path: 'no-message-debug.png' });

                // Verificar si los modales se cerraron (indicar√≠a √©xito)
                const modalPagoVisible = await page.locator('#modal-pago').isVisible();
                const modalOperacionVisible = await page.locator('#modal-operacion-habitacion').isVisible();

                console.log(`Modal pago visible: ${modalPagoVisible}, Modal operaci√≥n visible: ${modalOperacionVisible}`);

                if (!modalPagoVisible && !modalOperacionVisible) {
                    console.log('‚úÖ Modales cerrados, asumiendo √©xito');
                    // Si los modales se cerraron, podemos asumir que fue exitoso
                } else {
                    throw new Error('No se encontr√≥ mensaje de √©xito ni los modales se cerraron');
                }
            }
        }

        const textoMensaje = await mensajeExito.textContent();
        console.log(`‚úÖ Mensaje de √©xito: ${textoMensaje}`);

        // Verificar que contiene "check-in"
        expect(textoMensaje).toMatch(/check-in.*exitosamente/i);

        // Esperar a que se cierre el modal
        await expect(modalPago).not.toBeVisible({ timeout: 10000 });
        console.log('‚úÖ Modal de pago cerrado');

        // ===== PASO 13: VERIFICAR ACTUALIZACI√ìN DE HABITACI√ìN =====
        console.log('üìù PASO 13: Verificando actualizaci√≥n del estado de la habitaci√≥n...');

        // Esperar un momento para que se actualicen los datos
        await page.waitForTimeout(3000);

        // Buscar la habitaci√≥n que acabamos de procesar
        const habitacionProcesada = page.locator(`[data-numero="${numeroHabitacion}"]`);

        // Verificar que ya no est√° disponible (deber√≠a estar ocupada)
        await expect(habitacionProcesada).not.toHaveClass(/estado-disponible/);
        console.log('‚úÖ Estado de habitaci√≥n actualizado correctamente');

        // ===== PASO 14: VERIFICAR ESTAD√çSTICAS =====
        console.log('üìù PASO 14: Verificando actualizaci√≥n de estad√≠sticas...');

        // Verificar que las estad√≠sticas se actualizaron
        const statsOcupadas = page.locator('#total-ocupadas');
        const statsDisponibles = page.locator('#total-disponibles');

        await expect(statsOcupadas).toBeVisible();
        await expect(statsDisponibles).toBeVisible();

        const ocupadasText = await statsOcupadas.textContent();
        const disponiblesText = await statsDisponibles.textContent();

        console.log(`üìä Estad√≠sticas actualizadas - Ocupadas: ${ocupadasText}, Disponibles: ${disponiblesText}`);

        console.log('üéâ ¬°FLUJO COMPLETO EJECUTADO EXITOSAMENTE!');
    });

    test('Verificaci√≥n de estados de habitaciones y funcionalidad de limpieza/mantenimiento', async ({ page }) => {
        console.log('üßπ Iniciando test de estados de habitaciones...');

        // Login si es necesario
        try {
            const loginModal = page.locator('#modal-login');
            if (await loginModal.isVisible({ timeout: 5000 })) {
                await page.fill('#login-email', 'admin@hotel.com');
                await page.fill('#login-password', 'admin123');
                await page.click('#btn-login');
                await loginModal.waitFor({ state: 'detached', timeout: 10000 });
            }
        } catch (error) {
            // Login no necesario
        }

        // Verificar que hay habitaciones en diferentes estados
        await page.waitForSelector('.habitacion-card', { timeout: 10000 });

        // Buscar habitaciones en limpieza
        const habitacionesLimpieza = page.locator('.habitacion-card.estado-limpieza');
        const countLimpieza = await habitacionesLimpieza.count();

        if (countLimpieza > 0) {
            console.log(`üßπ Habitaciones en limpieza encontradas: ${countLimpieza}`);

            // Verificar bot√≥n de marcar como limpia
            const btnMarcarLimpia = habitacionesLimpieza.first().locator('.habitacion-btn-action');
            await expect(btnMarcarLimpia).toBeVisible();
            await expect(btnMarcarLimpia).toContainText(/limpia/i);

            console.log('‚úÖ Bot√≥n de marcar como limpia verificado');
        }

        // Buscar habitaciones en mantenimiento
        const habitacionesMantenimiento = page.locator('.habitacion-card.estado-mantenimiento');
        const countMantenimiento = await habitacionesMantenimiento.count();

        if (countMantenimiento > 0) {
            console.log(`üîß Habitaciones en mantenimiento encontradas: ${countMantenimiento}`);

            // Verificar bot√≥n de finalizar mantenimiento
            const btnFinalizarMantenimiento = habitacionesMantenimiento.first().locator('.habitacion-btn-action');
            await expect(btnFinalizarMantenimiento).toBeVisible();
            await expect(btnFinalizarMantenimiento).toContainText(/mantenimiento/i);

            console.log('‚úÖ Bot√≥n de finalizar mantenimiento verificado');
        }

        console.log('‚úÖ Estados de habitaciones verificados correctamente');
    });

    test('Verificaci√≥n de navegaci√≥n entre secciones', async ({ page }) => {
        console.log('üß≠ Iniciando test de navegaci√≥n...');

        // Login si es necesario
        try {
            const loginModal = page.locator('#modal-login');
            if (await loginModal.isVisible({ timeout: 5000 })) {
                await page.fill('#login-email', 'admin@hotel.com');
                await page.fill('#login-password', 'admin123');
                await page.click('#btn-login');
                await loginModal.waitFor({ state: 'detached', timeout: 10000 });
            }
        } catch (error) {
            // Login no necesario
        }

        // Verificar navegaci√≥n a TPV/Pedidos
        const btnPedidos = page.locator('.nav-btn[data-vista="vista-pedido"]');
        await btnPedidos.click();

        await expect(page.locator('#vista-pedido')).toBeVisible();
        await expect(btnPedidos).toHaveClass(/active/);
        console.log('‚úÖ Navegaci√≥n a TPV/Pedidos verificada');

        // Verificar navegaci√≥n a Reportes
        const btnReportes = page.locator('.nav-btn[data-vista="vista-reportes"]');
        await btnReportes.click();

        await expect(page.locator('#vista-reportes')).toBeVisible();
        await expect(btnReportes).toHaveClass(/active/);
        console.log('‚úÖ Navegaci√≥n a Reportes verificada');

        // Volver a Recepci√≥n
        const btnRecepcion = page.locator('.nav-btn[data-vista="vista-recepcion"]');
        await btnRecepcion.click();

        await expect(page.locator('#vista-recepcion')).toBeVisible();
        await expect(btnRecepcion).toHaveClass(/active/);
        console.log('‚úÖ Navegaci√≥n de vuelta a Recepci√≥n verificada');
    });
});
